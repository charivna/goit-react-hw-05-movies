{"version":3,"file":"static/js/387.020a80ae.chunk.js","mappings":"2OAEaA,E,QAAcC,EAAAA,GAAH,uF,SCGT,SAASC,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAWA,OARAC,EAAAA,EAAAA,YAAU,WACHL,IACLM,EAAAA,EAAAA,IAAkBN,GAASO,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACjCJ,EAAWI,GACXC,QAAQC,IAAIF,EACb,GACF,GAAE,CAACR,KAGF,gCACGG,IACC,SAACN,EAAD,UACGM,EAAQQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,0BAAI,WAASD,MACb,uBAAIC,MAFGF,EADE,MASG,IAAnBT,EAAQY,QAvBG,8CA0BjB,C,yLClCKC,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,CAAC,EAA1D,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,uCACeC,GAE7C,CAEM,SAASY,EAAe7B,GAC7B,OAAOkB,EAAuB,GAAD,OACxBF,EADwB,kBACNhB,EADM,oBACaiB,EADb,mBAG9B,CAEM,SAASa,EAAkBC,GAChC,OAAOb,EAAuB,GAAD,OACxBF,EADwB,iCACSC,EADT,iCACyCc,EADzC,+BAG9B,CAEM,SAASC,EAAkBhC,GAChC,OAAOkB,EAAuB,GAAD,OACxBF,EADwB,kBACNhB,EADM,4BACqBiB,EADrB,mBAG9B,CAEM,SAASX,EAAkBN,GAChC,OAAOkB,EAAuB,GAAD,OACxBF,EADwB,kBACNhB,EADM,4BACqBiB,EADrB,0BAG9B,C,uBCtCD,SAASgB,EAAmBC,EAAKC,EAAST,EAAQU,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAON,EAAII,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAhB,EAAOgB,EAET,CACIF,EAAKG,KACPR,EAAQM,GAERhB,QAAQU,QAAQM,GAAOlC,KAAK6B,EAAOC,EAEvC,CACe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIxB,SAAQ,SAAUU,EAAST,GACpC,IAAIQ,EAAMW,EAAGK,MAAMJ,EAAME,GACzB,SAASZ,EAAMK,GACbR,EAAmBC,EAAKC,EAAST,EAAQU,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOc,GACdlB,EAAmBC,EAAKC,EAAST,EAAQU,EAAOC,EAAQ,QAASc,EACnE,CACAf,OAAMgB,EACR,GACF,CACF,C","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/movie-api.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListReviews = styled.ul`\n  list-style: none;\n  font-size: 20px;\n  max-width: 1200px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/movie-api';\nimport { ListReviews } from './Reviews.styled';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const message = \"We don't have any reviews for this movie.\";\n\n  useEffect(() => {\n    if (!movieId) return;\n    fetchMovieReviews(movieId).then(({ results }) => {\n      setReviews(results);\n      console.log(results);\n    });\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews && (\n        <ListReviews>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>Author: {author}</h4>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ListReviews>\n      )}\n\n      {reviews.length === 0 && message}\n    </>\n  );\n}\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'afc97726cd3b4e142bea1138da06bc07';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrendingMovies() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMovieById(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchSearchMovies(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n}\n\nexport function fetchMovieCredits(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["ListReviews","styled","Reviews","movieId","useParams","useState","reviews","setReviews","useEffect","fetchMovieReviews","then","results","console","log","map","id","author","content","length","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchMovieById","fetchSearchMovies","query","fetchMovieCredits","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","error","done","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}