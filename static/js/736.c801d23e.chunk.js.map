{"version":3,"file":"static/js/736.c801d23e.chunk.js","mappings":"2PAEaA,EAAWC,EAAAA,EAAAA,GAAH,6CAIRC,EAAYD,EAAAA,EAAAA,GAAH,kEAKTE,EAAWF,EAAAA,EAAAA,IAAH,kEAKRG,EAAOH,EAAAA,EAAAA,EAAH,6C,SCXF,SAASI,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACHL,IACLM,EAAAA,EAAAA,IAAkBN,GAASO,MAAK,YAAe,IAAZJ,EAAW,EAAXA,KACjCC,EAAQD,GACRK,QAAQC,IAAIN,EACb,GACF,GAAE,CAACH,IAMJ,OACE,gCACGG,IACC,SAACT,EAAD,UACGS,EAAKO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,UAAClB,EAAD,YACE,gBACEmB,MAAM,MACNC,IAAKF,EAAY,UAZhB,mCAYgB,OAAeA,GAT5C,8EAUYG,IAAKL,KAEP,UAACf,EAAD,YACE,SAACC,EAAD,UAAOc,KACP,yBAAG,cAAYC,UARHF,EADR,MAeG,IAAhBR,EAAKe,QAhCM,2CAmCjB,C,yLC3CKC,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,CAAC,EAA1D,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,uCACeC,GAE7C,CAEM,SAASY,EAAehC,GAC7B,OAAOqB,EAAuB,GAAD,OACxBF,EADwB,kBACNnB,EADM,oBACaoB,EADb,mBAG9B,CAEM,SAASa,EAAkBC,GAChC,OAAOb,EAAuB,GAAD,OACxBF,EADwB,iCACSC,EADT,iCACyCc,EADzC,+BAG9B,CAEM,SAAS5B,EAAkBN,GAChC,OAAOqB,EAAuB,GAAD,OACxBF,EADwB,kBACNnB,EADM,4BACqBoB,EADrB,mBAG9B,CAEM,SAASe,EAAkBnC,GAChC,OAAOqB,EAAuB,GAAD,OACxBF,EADwB,kBACNnB,EADM,4BACqBoB,EADrB,0BAG9B,C,uBCtCD,SAASgB,EAAmBC,EAAKC,EAAST,EAAQU,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAON,EAAII,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAhB,EAAOgB,EAET,CACIF,EAAKG,KACPR,EAAQM,GAERhB,QAAQU,QAAQM,GAAOrC,KAAKgC,EAAOC,EAEvC,CACe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIxB,SAAQ,SAAUU,EAAST,GACpC,IAAIQ,EAAMW,EAAGK,MAAMJ,EAAME,GACzB,SAASZ,EAAMK,GACbR,EAAmBC,EAAKC,EAAST,EAAQU,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOc,GACdlB,EAAmBC,EAAKC,EAAST,EAAQU,EAAOC,EAAQ,QAASc,EACnE,CACAf,OAAMgB,EACR,GACF,CACF,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/movie-api.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  list-style: none;\n`;\n\nexport const CardActor = styled.li`\n  display: flex;\n  margin-bottom: 15px;\n`;\n\nexport const CardText = styled.div`\n  margin-left: 20px;\n  font-size: 20px;\n`;\n\nexport const Name = styled.p`\n  font-weight: 600;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from 'services/movie-api';\nimport { CardActor, CardText, CastList, Name } from './Cast.styled';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const message = \"We don't have any cast for this movie.\";\n  useEffect(() => {\n    if (!movieId) return;\n    fetchMovieCredits(movieId).then(({ cast }) => {\n      setCast(cast);\n      console.log(cast);\n    });\n  }, [movieId]);\n\n  const imgurl = 'https://image.tmdb.org/t/p/w300';\n\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n  return (\n    <>\n      {cast && (\n        <CastList>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <CardActor key={id}>\n              <img\n                width=\"150\"\n                src={profile_path ? `${imgurl}${profile_path}` : defaultImg}\n                alt={name}\n              />\n              <CardText>\n                <Name>{name}</Name>\n                <p>Character: {character}</p>\n              </CardText>\n            </CardActor>\n          ))}\n        </CastList>\n      )}\n      {cast.length === 0 && message}\n    </>\n  );\n}\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'afc97726cd3b4e142bea1138da06bc07';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrendingMovies() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMovieById(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchSearchMovies(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n}\n\nexport function fetchMovieCredits(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["CastList","styled","CardActor","CardText","Name","Cast","movieId","useParams","useState","cast","setCast","useEffect","fetchMovieCredits","then","console","log","map","id","name","character","profile_path","width","src","alt","length","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchMovieById","fetchSearchMovies","query","fetchMovieReviews","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","error","done","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}